//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Walter/Documents/IIS2024/Compiladores/ProyectoMini-Python/ProyectoRider/Mini_Python/Mini_Python/compilador/miniPythonLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class miniPythonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, WS=2, INDENT=3, DEDENT=4, BlockComment=5, ComillasDoblesComment=6, 
		LineComment=7, DEF=8, IF=9, ELSE=10, WHILE=11, FOR=12, RETURN=13, PRINT=14, 
		IN=15, LEN=16, PLUS=17, MINUS=18, MULT=19, DIV=20, LT=21, GT=22, LE=23, 
		GE=24, EQ=25, ASSIGN=26, COMMA=27, LPAREN=28, RPAREN=29, LBRACKET=30, 
		RBRACKET=31, LBRACE=32, RBRACE=33, DOSPUNTOS=34, INTEGER=35, FLOAT=36, 
		CHARCONST=37, STRING=38, IDENTIFIER=39;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "WS", "INDENT", "DEDENT", "BlockComment", "ComillasDoblesComment", 
		"LineComment", "DEF", "IF", "ELSE", "WHILE", "FOR", "RETURN", "PRINT", 
		"IN", "LEN", "PLUS", "MINUS", "MULT", "DIV", "LT", "GT", "LE", "GE", "EQ", 
		"ASSIGN", "COMMA", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LBRACE", 
		"RBRACE", "DOSPUNTOS", "INTEGER", "FLOAT", "CHARCONST", "STRING", "IDENTIFIER"
	};


	    private bool pendingDent = true;
	    private int indentCount = 0;
	    private LinkedList<IToken> tokenQueue = new LinkedList<IToken>();
	    private Stack<int> indentStack = new Stack<int>();
	    private IToken initialIndentToken = null;
	    private int getSavedIndent() {
	        return indentStack.Count == 0 ? 0 : indentStack.Peek();
	    }
	    private CommonToken createToken(int type, string text, IToken next) {
	        CommonToken token = new CommonToken(type, text);
	        if (initialIndentToken != null) {
	            token.StartIndex = initialIndentToken.StartIndex;
	            token.Line = initialIndentToken.Line;
	            token.Column = initialIndentToken.Column;
	            token.StopIndex = next.StartIndex - 1;
	        }
	        return token;
	    }
	    public override IToken NextToken() {
	        if (tokenQueue.Count > 0) {
	            var firstToken = tokenQueue.First.Value;
	            tokenQueue.RemoveFirst();
	            return firstToken;
	        }
	        IToken next = base.NextToken();
	        if (pendingDent && initialIndentToken == null && next.Type != NEWLINE) {
	            initialIndentToken = next;
	        }
	        if (next == null || next.Channel == Hidden || next.Type == NEWLINE) {
	            return next;
	        }
	        if (next.Type == TokenConstants.EOF) {
	            indentCount = 0;
	            if (!pendingDent) {
	                initialIndentToken = next;
	                tokenQueue.AddLast(createToken(NEWLINE, "NEWLINE", next));
	            }
	        }
	        // Ajustar las diferencias entre el conteo actual de indentaciones y el Ãºltimo guardado
	        while (indentCount != getSavedIndent()) {
	            int difference = Math.Abs(indentCount - getSavedIndent());
	            if (difference == 0|| difference == 4 || indentStack.Contains(difference) || difference == getSavedIndent()) {
	                if (indentCount > getSavedIndent()) {
	                    indentStack.Push(indentCount);
	                    tokenQueue.AddLast(createToken(INDENT, "INDENT", next));
	                } else {
	                    indentStack.Pop();
	                    tokenQueue.AddLast(createToken(DEDENT, "DEDENT", next));
	                }
	            }else
	            {
	                return next;
	            }               
	        }
	        pendingDent = false;
	        tokenQueue.AddLast(next);
	        var dequeuedToken = tokenQueue.First.Value;
	        tokenQueue.RemoveFirst();
	        return dequeuedToken;
	    }


	public miniPythonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public miniPythonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'INDENT'", "'DEDENT'", null, null, null, "'def'", "'if'", 
		"'else'", "'while'", "'for'", "'return'", "'print'", "'in'", "'len'", 
		"'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", "'=='", "'='", 
		"','", "'('", "')'", "'['", "']'", "'{'", "'}'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "WS", "INDENT", "DEDENT", "BlockComment", "ComillasDoblesComment", 
		"LineComment", "DEF", "IF", "ELSE", "WHILE", "FOR", "RETURN", "PRINT", 
		"IN", "LEN", "PLUS", "MINUS", "MULT", "DIV", "LT", "GT", "LE", "GE", "EQ", 
		"ASSIGN", "COMMA", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LBRACE", 
		"RBRACE", "DOSPUNTOS", "INTEGER", "FLOAT", "CHARCONST", "STRING", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "miniPythonLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static miniPythonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 0 : NEWLINE_action(_localctx, actionIndex); break;
		case 1 : WS_action(_localctx, actionIndex); break;
		case 2 : INDENT_action(_localctx, actionIndex); break;
		case 3 : DEDENT_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
		    if (pendingDent) { Channel = Hidden; }
		    pendingDent = true;
		    indentCount = 0;
		    initialIndentToken = null;
		 break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: 
		    Channel = Hidden;
		    if (pendingDent) { indentCount += Text.Length; }
		 break;
		}
	}
	private void INDENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2:  Channel = Hidden;  break;
		}
	}
	private void DEDENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3:  Channel = Hidden;  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,39,278,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,3,0,81,8,0,1,0,1,0,3,0,85,8,0,1,
		0,1,0,1,1,4,1,90,8,1,11,1,12,1,91,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,
		4,120,8,4,10,4,12,4,123,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
		5,1,5,5,5,137,8,5,10,5,12,5,140,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,5,
		6,150,8,6,10,6,12,6,153,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
		14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,
		20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
		26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
		33,1,33,1,34,4,34,239,8,34,11,34,12,34,240,1,35,4,35,244,8,35,11,35,12,
		35,245,1,35,1,35,4,35,250,8,35,11,35,12,35,251,1,36,1,36,5,36,256,8,36,
		10,36,12,36,259,9,36,1,36,1,36,1,37,1,37,5,37,265,8,37,10,37,12,37,268,
		9,37,1,37,1,37,1,38,1,38,5,38,274,8,38,10,38,12,38,277,9,38,4,121,138,
		257,266,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
		73,37,75,38,77,39,1,0,5,2,0,9,9,32,32,2,0,10,10,13,13,1,0,48,57,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,291,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,84,1,0,0,0,3,89,
		1,0,0,0,5,95,1,0,0,0,7,104,1,0,0,0,9,113,1,0,0,0,11,130,1,0,0,0,13,147,
		1,0,0,0,15,156,1,0,0,0,17,160,1,0,0,0,19,163,1,0,0,0,21,168,1,0,0,0,23,
		174,1,0,0,0,25,178,1,0,0,0,27,185,1,0,0,0,29,191,1,0,0,0,31,194,1,0,0,
		0,33,198,1,0,0,0,35,200,1,0,0,0,37,202,1,0,0,0,39,204,1,0,0,0,41,206,1,
		0,0,0,43,208,1,0,0,0,45,210,1,0,0,0,47,213,1,0,0,0,49,216,1,0,0,0,51,219,
		1,0,0,0,53,221,1,0,0,0,55,223,1,0,0,0,57,225,1,0,0,0,59,227,1,0,0,0,61,
		229,1,0,0,0,63,231,1,0,0,0,65,233,1,0,0,0,67,235,1,0,0,0,69,238,1,0,0,
		0,71,243,1,0,0,0,73,253,1,0,0,0,75,262,1,0,0,0,77,271,1,0,0,0,79,81,5,
		13,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,85,5,10,0,0,83,85,
		5,13,0,0,84,80,1,0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,87,6,0,0,0,87,2,
		1,0,0,0,88,90,7,0,0,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,
		1,0,0,0,92,93,1,0,0,0,93,94,6,1,1,0,94,4,1,0,0,0,95,96,5,73,0,0,96,97,
		5,78,0,0,97,98,5,68,0,0,98,99,5,69,0,0,99,100,5,78,0,0,100,101,5,84,0,
		0,101,102,1,0,0,0,102,103,6,2,2,0,103,6,1,0,0,0,104,105,5,68,0,0,105,106,
		5,69,0,0,106,107,5,68,0,0,107,108,5,69,0,0,108,109,5,78,0,0,109,110,5,
		84,0,0,110,111,1,0,0,0,111,112,6,3,3,0,112,8,1,0,0,0,113,114,5,39,0,0,
		114,115,5,39,0,0,115,116,5,39,0,0,116,121,1,0,0,0,117,120,9,0,0,0,118,
		120,3,1,0,0,119,117,1,0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,122,1,
		0,0,0,121,119,1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,5,39,0,0,
		125,126,5,39,0,0,126,127,5,39,0,0,127,128,1,0,0,0,128,129,6,4,4,0,129,
		10,1,0,0,0,130,131,5,34,0,0,131,132,5,34,0,0,132,133,5,34,0,0,133,138,
		1,0,0,0,134,137,9,0,0,0,135,137,3,1,0,0,136,134,1,0,0,0,136,135,1,0,0,
		0,137,140,1,0,0,0,138,139,1,0,0,0,138,136,1,0,0,0,139,141,1,0,0,0,140,
		138,1,0,0,0,141,142,5,34,0,0,142,143,5,34,0,0,143,144,5,34,0,0,144,145,
		1,0,0,0,145,146,6,5,4,0,146,12,1,0,0,0,147,151,5,35,0,0,148,150,8,1,0,
		0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,
		154,1,0,0,0,153,151,1,0,0,0,154,155,6,6,4,0,155,14,1,0,0,0,156,157,5,100,
		0,0,157,158,5,101,0,0,158,159,5,102,0,0,159,16,1,0,0,0,160,161,5,105,0,
		0,161,162,5,102,0,0,162,18,1,0,0,0,163,164,5,101,0,0,164,165,5,108,0,0,
		165,166,5,115,0,0,166,167,5,101,0,0,167,20,1,0,0,0,168,169,5,119,0,0,169,
		170,5,104,0,0,170,171,5,105,0,0,171,172,5,108,0,0,172,173,5,101,0,0,173,
		22,1,0,0,0,174,175,5,102,0,0,175,176,5,111,0,0,176,177,5,114,0,0,177,24,
		1,0,0,0,178,179,5,114,0,0,179,180,5,101,0,0,180,181,5,116,0,0,181,182,
		5,117,0,0,182,183,5,114,0,0,183,184,5,110,0,0,184,26,1,0,0,0,185,186,5,
		112,0,0,186,187,5,114,0,0,187,188,5,105,0,0,188,189,5,110,0,0,189,190,
		5,116,0,0,190,28,1,0,0,0,191,192,5,105,0,0,192,193,5,110,0,0,193,30,1,
		0,0,0,194,195,5,108,0,0,195,196,5,101,0,0,196,197,5,110,0,0,197,32,1,0,
		0,0,198,199,5,43,0,0,199,34,1,0,0,0,200,201,5,45,0,0,201,36,1,0,0,0,202,
		203,5,42,0,0,203,38,1,0,0,0,204,205,5,47,0,0,205,40,1,0,0,0,206,207,5,
		60,0,0,207,42,1,0,0,0,208,209,5,62,0,0,209,44,1,0,0,0,210,211,5,60,0,0,
		211,212,5,61,0,0,212,46,1,0,0,0,213,214,5,62,0,0,214,215,5,61,0,0,215,
		48,1,0,0,0,216,217,5,61,0,0,217,218,5,61,0,0,218,50,1,0,0,0,219,220,5,
		61,0,0,220,52,1,0,0,0,221,222,5,44,0,0,222,54,1,0,0,0,223,224,5,40,0,0,
		224,56,1,0,0,0,225,226,5,41,0,0,226,58,1,0,0,0,227,228,5,91,0,0,228,60,
		1,0,0,0,229,230,5,93,0,0,230,62,1,0,0,0,231,232,5,123,0,0,232,64,1,0,0,
		0,233,234,5,125,0,0,234,66,1,0,0,0,235,236,5,58,0,0,236,68,1,0,0,0,237,
		239,7,2,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,
		0,0,0,241,70,1,0,0,0,242,244,7,2,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,
		243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,249,5,46,0,0,248,250,7,
		2,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,
		252,72,1,0,0,0,253,257,5,39,0,0,254,256,9,0,0,0,255,254,1,0,0,0,256,259,
		1,0,0,0,257,258,1,0,0,0,257,255,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,
		0,260,261,5,39,0,0,261,74,1,0,0,0,262,266,5,34,0,0,263,265,9,0,0,0,264,
		263,1,0,0,0,265,268,1,0,0,0,266,267,1,0,0,0,266,264,1,0,0,0,267,269,1,
		0,0,0,268,266,1,0,0,0,269,270,5,34,0,0,270,76,1,0,0,0,271,275,7,3,0,0,
		272,274,7,4,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,
		1,0,0,0,276,78,1,0,0,0,277,275,1,0,0,0,15,0,80,84,91,119,121,136,138,151,
		240,245,251,257,266,275,5,1,0,0,1,1,1,1,2,2,1,3,3,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parser.generated
