//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Walter/Documents/IIS2024/Compiladores/ProyectoMini-Python/ProyectoRider/Mini_Python/Mini_Python/compilador/miniPythonLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class miniPythonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, WS=2, INDENT=3, DEDENT=4, BlockComment=5, ComillasDoblesComment=6, 
		LineComment=7, DEF=8, IF=9, ELSE=10, WHILE=11, FOR=12, RETURN=13, PRINT=14, 
		IN=15, LEN=16, PLUS=17, MINUS=18, MULT=19, DIV=20, LT=21, GT=22, LE=23, 
		GE=24, EQ=25, OR=26, AND=27, MODULAR=28, ASSIGN=29, COMMA=30, LPAREN=31, 
		RPAREN=32, LBRACKET=33, RBRACKET=34, LBRACE=35, RBRACE=36, DOSPUNTOS=37, 
		INTEGER=38, FLOAT=39, CHARCONST=40, STRING=41, IDENTIFIER=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "WS", "INDENT", "DEDENT", "BlockComment", "ComillasDoblesComment", 
		"LineComment", "DEF", "IF", "ELSE", "WHILE", "FOR", "RETURN", "PRINT", 
		"IN", "LEN", "PLUS", "MINUS", "MULT", "DIV", "LT", "GT", "LE", "GE", "EQ", 
		"OR", "AND", "MODULAR", "ASSIGN", "COMMA", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "LBRACE", "RBRACE", "DOSPUNTOS", "INTEGER", "FLOAT", "CHARCONST", 
		"STRING", "IDENTIFIER"
	};


	    private bool pendingDent = true;
	    private int indentCount = 0;
	    private LinkedList<IToken> tokenQueue = new LinkedList<IToken>();
	    private Stack<int> indentStack = new Stack<int>();
	    private IToken initialIndentToken = null;
	    private int getSavedIndent() {
	        return indentStack.Count == 0 ? 0 : indentStack.Peek();
	    }
	    private CommonToken createToken(int type, string text, IToken next) {
	        CommonToken token = new CommonToken(type, text);
	        if (initialIndentToken != null) {
	            token.StartIndex = initialIndentToken.StartIndex;
	            token.Line = initialIndentToken.Line;
	            token.Column = initialIndentToken.Column;
	            token.StopIndex = next.StartIndex - 1;
	        }
	        return token;
	    }
	    public override IToken NextToken() {
	        if (tokenQueue.Count > 0) {
	            var firstToken = tokenQueue.First.Value;
	            tokenQueue.RemoveFirst();
	            return firstToken;
	        }
	        IToken next = base.NextToken();
	        if (pendingDent && initialIndentToken == null && next.Type != NEWLINE) {
	            initialIndentToken = next;
	        }
	        if (next == null || next.Channel == Hidden || next.Type == NEWLINE) {
	            return next;
	        }
	        if (next.Type == TokenConstants.EOF) {
	                            indentCount = 0;
	                            if (!pendingDent) {
	                                initialIndentToken = next;
	                                tokenQueue.AddLast(createToken(NEWLINE, "NEWLINE", next));
	                            }
	                        }
	        // Ajustar las diferencias entre el conteo actual de indentaciones y el Ãºltimo guardado
	        while (indentCount != getSavedIndent()) {
	            int difference = Math.Abs(indentCount - getSavedIndent());
	            if (difference == 0|| difference == 4 || indentStack.Contains(difference) || difference == getSavedIndent()) {
	                if (indentCount > getSavedIndent()) {
	                    indentStack.Push(indentCount);
	                    tokenQueue.AddLast(createToken(INDENT, "INDENT", next));
	                } else {
	                    indentStack.Pop();
	                    tokenQueue.AddLast(createToken(DEDENT, "DEDENT", next));
	                }
	            }else
	            {
	                return next;
	            }               
	        }
	        pendingDent = false;
	        tokenQueue.AddLast(next);
	        var dequeuedToken = tokenQueue.First.Value;
	        tokenQueue.RemoveFirst();
	        return dequeuedToken;
	    }


	public miniPythonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public miniPythonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'INDENT'", "'DEDENT'", null, null, null, "'def'", "'if'", 
		"'else'", "'while'", "'for'", "'return'", "'print'", "'in'", "'len'", 
		"'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", "'=='", "'or'", 
		"'and'", "'%'", "'='", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "WS", "INDENT", "DEDENT", "BlockComment", "ComillasDoblesComment", 
		"LineComment", "DEF", "IF", "ELSE", "WHILE", "FOR", "RETURN", "PRINT", 
		"IN", "LEN", "PLUS", "MINUS", "MULT", "DIV", "LT", "GT", "LE", "GE", "EQ", 
		"OR", "AND", "MODULAR", "ASSIGN", "COMMA", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "LBRACE", "RBRACE", "DOSPUNTOS", "INTEGER", "FLOAT", "CHARCONST", 
		"STRING", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "miniPythonLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static miniPythonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 0 : NEWLINE_action(_localctx, actionIndex); break;
		case 1 : WS_action(_localctx, actionIndex); break;
		case 2 : INDENT_action(_localctx, actionIndex); break;
		case 3 : DEDENT_action(_localctx, actionIndex); break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
		    if (pendingDent){  Channel = Hidden;} 
		    pendingDent = true;
		    indentCount = 0;
		    initialIndentToken = null;
		 break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: 
		    Channel = Hidden;
		    if (pendingDent) { indentCount += Text.Length; }
		 break;
		}
	}
	private void INDENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2:  Channel = Hidden;  break;
		}
	}
	private void DEDENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3:  Channel = Hidden;  break;
		}
	}

	private static int[] _serializedATN = {
		4,0,42,293,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,3,
		0,87,8,0,1,0,1,0,3,0,91,8,0,1,0,1,0,1,1,4,1,96,8,1,11,1,12,1,97,1,1,1,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,126,8,4,10,4,12,4,129,9,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,143,8,5,10,5,12,5,146,9,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,5,6,156,8,6,10,6,12,6,159,9,6,1,6,1,6,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,
		17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
		23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,
		28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
		35,1,36,1,36,1,37,4,37,254,8,37,11,37,12,37,255,1,38,4,38,259,8,38,11,
		38,12,38,260,1,38,1,38,4,38,265,8,38,11,38,12,38,266,1,39,1,39,5,39,271,
		8,39,10,39,12,39,274,9,39,1,39,1,39,1,40,1,40,5,40,280,8,40,10,40,12,40,
		283,9,40,1,40,1,40,1,41,1,41,5,41,289,8,41,10,41,12,41,292,9,41,4,127,
		144,272,281,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,5,2,0,9,9,32,32,2,0,10,10,13,
		13,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,306,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,90,1,0,0,0,3,95,1,0,0,0,5,101,
		1,0,0,0,7,110,1,0,0,0,9,119,1,0,0,0,11,136,1,0,0,0,13,153,1,0,0,0,15,162,
		1,0,0,0,17,166,1,0,0,0,19,169,1,0,0,0,21,174,1,0,0,0,23,180,1,0,0,0,25,
		184,1,0,0,0,27,191,1,0,0,0,29,197,1,0,0,0,31,200,1,0,0,0,33,204,1,0,0,
		0,35,206,1,0,0,0,37,208,1,0,0,0,39,210,1,0,0,0,41,212,1,0,0,0,43,214,1,
		0,0,0,45,216,1,0,0,0,47,219,1,0,0,0,49,222,1,0,0,0,51,225,1,0,0,0,53,228,
		1,0,0,0,55,232,1,0,0,0,57,234,1,0,0,0,59,236,1,0,0,0,61,238,1,0,0,0,63,
		240,1,0,0,0,65,242,1,0,0,0,67,244,1,0,0,0,69,246,1,0,0,0,71,248,1,0,0,
		0,73,250,1,0,0,0,75,253,1,0,0,0,77,258,1,0,0,0,79,268,1,0,0,0,81,277,1,
		0,0,0,83,286,1,0,0,0,85,87,5,13,0,0,86,85,1,0,0,0,86,87,1,0,0,0,87,88,
		1,0,0,0,88,91,5,10,0,0,89,91,5,13,0,0,90,86,1,0,0,0,90,89,1,0,0,0,91,92,
		1,0,0,0,92,93,6,0,0,0,93,2,1,0,0,0,94,96,7,0,0,0,95,94,1,0,0,0,96,97,1,
		0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,6,1,1,0,100,4,1,
		0,0,0,101,102,5,73,0,0,102,103,5,78,0,0,103,104,5,68,0,0,104,105,5,69,
		0,0,105,106,5,78,0,0,106,107,5,84,0,0,107,108,1,0,0,0,108,109,6,2,2,0,
		109,6,1,0,0,0,110,111,5,68,0,0,111,112,5,69,0,0,112,113,5,68,0,0,113,114,
		5,69,0,0,114,115,5,78,0,0,115,116,5,84,0,0,116,117,1,0,0,0,117,118,6,3,
		3,0,118,8,1,0,0,0,119,120,5,39,0,0,120,121,5,39,0,0,121,122,5,39,0,0,122,
		127,1,0,0,0,123,126,9,0,0,0,124,126,3,1,0,0,125,123,1,0,0,0,125,124,1,
		0,0,0,126,129,1,0,0,0,127,128,1,0,0,0,127,125,1,0,0,0,128,130,1,0,0,0,
		129,127,1,0,0,0,130,131,5,39,0,0,131,132,5,39,0,0,132,133,5,39,0,0,133,
		134,1,0,0,0,134,135,6,4,4,0,135,10,1,0,0,0,136,137,5,34,0,0,137,138,5,
		34,0,0,138,139,5,34,0,0,139,144,1,0,0,0,140,143,9,0,0,0,141,143,3,1,0,
		0,142,140,1,0,0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,145,1,0,0,0,144,
		142,1,0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,147,148,5,34,0,0,148,149,5,
		34,0,0,149,150,5,34,0,0,150,151,1,0,0,0,151,152,6,5,4,0,152,12,1,0,0,0,
		153,157,5,35,0,0,154,156,8,1,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,
		1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,6,6,4,
		0,161,14,1,0,0,0,162,163,5,100,0,0,163,164,5,101,0,0,164,165,5,102,0,0,
		165,16,1,0,0,0,166,167,5,105,0,0,167,168,5,102,0,0,168,18,1,0,0,0,169,
		170,5,101,0,0,170,171,5,108,0,0,171,172,5,115,0,0,172,173,5,101,0,0,173,
		20,1,0,0,0,174,175,5,119,0,0,175,176,5,104,0,0,176,177,5,105,0,0,177,178,
		5,108,0,0,178,179,5,101,0,0,179,22,1,0,0,0,180,181,5,102,0,0,181,182,5,
		111,0,0,182,183,5,114,0,0,183,24,1,0,0,0,184,185,5,114,0,0,185,186,5,101,
		0,0,186,187,5,116,0,0,187,188,5,117,0,0,188,189,5,114,0,0,189,190,5,110,
		0,0,190,26,1,0,0,0,191,192,5,112,0,0,192,193,5,114,0,0,193,194,5,105,0,
		0,194,195,5,110,0,0,195,196,5,116,0,0,196,28,1,0,0,0,197,198,5,105,0,0,
		198,199,5,110,0,0,199,30,1,0,0,0,200,201,5,108,0,0,201,202,5,101,0,0,202,
		203,5,110,0,0,203,32,1,0,0,0,204,205,5,43,0,0,205,34,1,0,0,0,206,207,5,
		45,0,0,207,36,1,0,0,0,208,209,5,42,0,0,209,38,1,0,0,0,210,211,5,47,0,0,
		211,40,1,0,0,0,212,213,5,60,0,0,213,42,1,0,0,0,214,215,5,62,0,0,215,44,
		1,0,0,0,216,217,5,60,0,0,217,218,5,61,0,0,218,46,1,0,0,0,219,220,5,62,
		0,0,220,221,5,61,0,0,221,48,1,0,0,0,222,223,5,61,0,0,223,224,5,61,0,0,
		224,50,1,0,0,0,225,226,5,111,0,0,226,227,5,114,0,0,227,52,1,0,0,0,228,
		229,5,97,0,0,229,230,5,110,0,0,230,231,5,100,0,0,231,54,1,0,0,0,232,233,
		5,37,0,0,233,56,1,0,0,0,234,235,5,61,0,0,235,58,1,0,0,0,236,237,5,44,0,
		0,237,60,1,0,0,0,238,239,5,40,0,0,239,62,1,0,0,0,240,241,5,41,0,0,241,
		64,1,0,0,0,242,243,5,91,0,0,243,66,1,0,0,0,244,245,5,93,0,0,245,68,1,0,
		0,0,246,247,5,123,0,0,247,70,1,0,0,0,248,249,5,125,0,0,249,72,1,0,0,0,
		250,251,5,58,0,0,251,74,1,0,0,0,252,254,7,2,0,0,253,252,1,0,0,0,254,255,
		1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,76,1,0,0,0,257,259,7,2,0,0,
		258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,262,
		1,0,0,0,262,264,5,46,0,0,263,265,7,2,0,0,264,263,1,0,0,0,265,266,1,0,0,
		0,266,264,1,0,0,0,266,267,1,0,0,0,267,78,1,0,0,0,268,272,5,39,0,0,269,
		271,9,0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,273,1,0,0,0,272,270,1,
		0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,5,39,0,0,276,80,1,0,0,0,
		277,281,5,34,0,0,278,280,9,0,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,282,
		1,0,0,0,281,279,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,285,5,34,0,
		0,285,82,1,0,0,0,286,290,7,3,0,0,287,289,7,4,0,0,288,287,1,0,0,0,289,292,
		1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,84,1,0,0,0,292,290,1,0,0,0,
		15,0,86,90,97,125,127,142,144,157,255,260,266,272,281,290,5,1,0,0,1,1,
		1,1,2,2,1,3,3,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parser.generated
