//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Walter/Documents/IIS2024/Compiladores/ProyectoMini-Python/ProyectoRider/Mini_Python/Mini_Python/compilador/miniPythonParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parser.generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class miniPythonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, WS=2, INDENT=3, DEDENT=4, BlockComment=5, LineComment=6, DEF=7, 
		IF=8, ELSE=9, WHILE=10, FOR=11, RETURN=12, PRINT=13, IN=14, LEN=15, PLUS=16, 
		MINUS=17, MULT=18, DIV=19, LT=20, GT=21, LE=22, GE=23, EQ=24, ASSIGN=25, 
		COMMA=26, LPAREN=27, RPAREN=28, LBRACKET=29, RBRACKET=30, LBRACE=31, RBRACE=32, 
		DOSPUNTOS=33, INTEGER=34, FLOAT=35, CHARCONST=36, STRING=37, IDENTIFIER=38;
	public const int
		RULE_program = 0, RULE_mainStatement = 1, RULE_statement = 2, RULE_defStatement = 3, 
		RULE_argList = 4, RULE_ifStatement = 5, RULE_whileStatement = 6, RULE_returnStatement = 7, 
		RULE_forStatement = 8, RULE_printStatement = 9, RULE_assignStatement = 10, 
		RULE_functionCallStatement = 11, RULE_sequence = 12, RULE_expression = 13, 
		RULE_comparison = 14, RULE_additionExpression = 15, RULE_multiplicationExpression = 16, 
		RULE_elementExpression = 17, RULE_expressionList = 18, RULE_primitiveExpression = 19, 
		RULE_listExpression = 20;
	public static readonly string[] ruleNames = {
		"program", "mainStatement", "statement", "defStatement", "argList", "ifStatement", 
		"whileStatement", "returnStatement", "forStatement", "printStatement", 
		"assignStatement", "functionCallStatement", "sequence", "expression", 
		"comparison", "additionExpression", "multiplicationExpression", "elementExpression", 
		"expressionList", "primitiveExpression", "listExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'INDENT'", "'DEDENT'", null, null, "'def'", "'if'", 
		"'else'", "'while'", "'for'", "'return'", "'print'", "'in'", "'len'", 
		"'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", "'=='", "'='", 
		"','", "'('", "')'", "'['", "']'", "'{'", "'}'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "WS", "INDENT", "DEDENT", "BlockComment", "LineComment", 
		"DEF", "IF", "ELSE", "WHILE", "FOR", "RETURN", "PRINT", "IN", "LEN", "PLUS", 
		"MINUS", "MULT", "DIV", "LT", "GT", "LE", "GE", "EQ", "ASSIGN", "COMMA", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "DOSPUNTOS", 
		"INTEGER", "FLOAT", "CHARCONST", "STRING", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "miniPythonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static miniPythonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public miniPythonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public miniPythonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(miniPythonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainStatementContext[] mainStatement() {
			return GetRuleContexts<MainStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainStatementContext mainStatement(int i) {
			return GetRuleContext<MainStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEF || _la==IDENTIFIER) {
				{
				{
				State = 42;
				mainStatement();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		public MainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainStatement; } }
	}

	[RuleVersion(0)]
	public MainStatementContext mainStatement() {
		MainStatementContext _localctx = new MainStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainStatement);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				defStatement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				assignStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				defStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				printStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59;
				assignStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60;
				forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 61;
				functionCallStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(miniPythonParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(miniPythonParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(miniPythonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(miniPythonParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS() { return GetToken(miniPythonParser.DOSPUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public DefStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStatement; } }
	}

	[RuleVersion(0)]
	public DefStatementContext defStatement() {
		DefStatementContext _localctx = new DefStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_defStatement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				Match(DEF);
				State = 65;
				Match(IDENTIFIER);
				State = 66;
				Match(LPAREN);
				State = 67;
				argList();
				State = 68;
				Match(RPAREN);
				State = 69;
				Match(DOSPUNTOS);
				State = 70;
				Match(NEWLINE);
				State = 71;
				sequence();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				Match(DEF);
				State = 74;
				Match(IDENTIFIER);
				State = 75;
				Match(LPAREN);
				State = 76;
				argList();
				State = 77;
				Match(RPAREN);
				 NotifyErrorListeners("Expected ':' after function definition"); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(miniPythonParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(miniPythonParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(miniPythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(miniPythonParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 8, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 82;
				Match(IDENTIFIER);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 83;
					Match(COMMA);
					State = 84;
					Match(IDENTIFIER);
					}
					}
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(miniPythonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOSPUNTOS() { return GetTokens(miniPythonParser.DOSPUNTOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS(int i) {
			return GetToken(miniPythonParser.DOSPUNTOS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(miniPythonParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(miniPythonParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext[] sequence() {
			return GetRuleContexts<SequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence(int i) {
			return GetRuleContext<SequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(miniPythonParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		int _la;
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				Match(IF);
				State = 93;
				expression();
				State = 94;
				Match(DOSPUNTOS);
				State = 95;
				Match(NEWLINE);
				State = 96;
				sequence();
				State = 97;
				Match(ELSE);
				State = 98;
				Match(DOSPUNTOS);
				State = 99;
				Match(NEWLINE);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDENT) {
					{
					State = 100;
					sequence();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				Match(IF);
				State = 104;
				expression();
				 NotifyErrorListeners("Expected ':' after 'expression' in If condition"); 
				State = 106;
				Match(ELSE);
				State = 107;
				Match(DOSPUNTOS);
				State = 108;
				Match(NEWLINE);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDENT) {
					{
					State = 109;
					sequence();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				Match(IF);
				State = 113;
				expression();
				State = 114;
				Match(DOSPUNTOS);
				State = 115;
				Match(NEWLINE);
				State = 116;
				sequence();
				State = 117;
				Match(ELSE);
				 NotifyErrorListeners("Expected ':' after 'else' in condition"); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(miniPythonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS() { return GetToken(miniPythonParser.DOSPUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileStatement);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				Match(WHILE);
				State = 123;
				expression();
				State = 124;
				Match(DOSPUNTOS);
				State = 125;
				Match(NEWLINE);
				State = 126;
				sequence();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(WHILE);
				State = 129;
				expression();
				 NotifyErrorListeners("Expected ':' after 'expression' in while condition"); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(miniPythonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(RETURN);
			State = 135;
			expression();
			State = 136;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(miniPythonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(miniPythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUNTOS() { return GetToken(miniPythonParser.DOSPUNTOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_forStatement);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				Match(FOR);
				State = 139;
				expression();
				State = 140;
				Match(IN);
				State = 141;
				expressionList();
				State = 142;
				Match(DOSPUNTOS);
				State = 143;
				Match(NEWLINE);
				State = 144;
				sequence();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(FOR);
				State = 147;
				expression();
				State = 148;
				Match(IN);
				State = 149;
				expressionList();
				 NotifyErrorListeners("Expected ':' after 'expression' in for declaration"); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(miniPythonParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(PRINT);
			State = 155;
			expression();
			State = 156;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(miniPythonParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(miniPythonParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(IDENTIFIER);
			State = 159;
			Match(ASSIGN);
			State = 160;
			expression();
			State = 161;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(miniPythonParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(miniPythonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(miniPythonParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(miniPythonParser.NEWLINE, 0); }
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(IDENTIFIER);
			State = 164;
			Match(LPAREN);
			State = 165;
			expressionList();
			State = 166;
			Match(RPAREN);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 167;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(miniPythonParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(miniPythonParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(INDENT);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 171;
				statement();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 274877922688L) != 0) );
			State = 176;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression() {
			return GetRuleContext<AdditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			additionExpression();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32505856L) != 0)) {
				{
				State = 179;
				comparison();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression() {
			return GetRuleContext<AdditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(miniPythonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(miniPythonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(miniPythonParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(miniPythonParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(miniPythonParser.EQ, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 28, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32505856L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 183;
			additionExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext[] multiplicationExpression() {
			return GetRuleContexts<MultiplicationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression(int i) {
			return GetRuleContext<MultiplicationExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(miniPythonParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(miniPythonParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(miniPythonParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(miniPythonParser.MINUS, i);
		}
		public AdditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExpression; } }
	}

	[RuleVersion(0)]
	public AdditionExpressionContext additionExpression() {
		AdditionExpressionContext _localctx = new AdditionExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_additionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			multiplicationExpression();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 186;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 187;
				multiplicationExpression();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementExpressionContext[] elementExpression() {
			return GetRuleContexts<ElementExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementExpressionContext elementExpression(int i) {
			return GetRuleContext<ElementExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(miniPythonParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(miniPythonParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(miniPythonParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(miniPythonParser.DIV, i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			elementExpression();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 194;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 195;
				elementExpression();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(miniPythonParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(miniPythonParser.RBRACKET, 0); }
		public ElementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementExpression; } }
	}

	[RuleVersion(0)]
	public ElementExpressionContext elementExpression() {
		ElementExpressionContext _localctx = new ElementExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_elementExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			primitiveExpression();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 202;
				Match(LBRACKET);
				State = 203;
				expression();
				State = 204;
				Match(RBRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(miniPythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(miniPythonParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 208;
				expression();
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 209;
					Match(COMMA);
					State = 210;
					expression();
					}
					}
					State = 215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(miniPythonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(miniPythonParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(miniPythonParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListExpressionContext listExpression() {
			return GetRuleContext<ListExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(miniPythonParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(miniPythonParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(miniPythonParser.CHARCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(miniPythonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(miniPythonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(miniPythonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(miniPythonParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_primitiveExpression);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				Match(LPAREN);
				State = 219;
				expression();
				State = 220;
				Match(RPAREN);
				}
				break;
			case LEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				Match(LEN);
				State = 223;
				Match(LPAREN);
				State = 224;
				expression();
				State = 225;
				Match(RPAREN);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				listExpression();
				}
				break;
			case PLUS:
			case MINUS:
			case INTEGER:
			case FLOAT:
			case CHARCONST:
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 228;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 231;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698037760L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 232;
				Match(IDENTIFIER);
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 233;
					Match(LPAREN);
					State = 234;
					expressionList();
					State = 235;
					Match(RPAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(miniPythonParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(miniPythonParser.RBRACKET, 0); }
		public ListExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listExpression; } }
	}

	[RuleVersion(0)]
	public ListExpressionContext listExpression() {
		ListExpressionContext _localctx = new ListExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_listExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(LBRACKET);
			State = 242;
			expressionList();
			State = 243;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,38,246,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,5,0,44,
		8,0,10,0,12,0,47,9,0,1,0,1,0,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,3,2,63,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,3,3,81,8,3,1,4,1,4,1,4,5,4,86,8,4,10,4,12,4,89,9,4,3,4,91,
		8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,102,8,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,3,5,111,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,121,8,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,133,8,6,1,7,1,7,1,7,1,7,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,153,8,8,1,9,1,9,
		1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,169,8,11,
		1,12,1,12,4,12,173,8,12,11,12,12,12,174,1,12,1,12,1,13,1,13,3,13,181,8,
		13,1,14,1,14,1,14,1,15,1,15,1,15,5,15,189,8,15,10,15,12,15,192,9,15,1,
		16,1,16,1,16,5,16,197,8,16,10,16,12,16,200,9,16,1,17,1,17,1,17,1,17,1,
		17,3,17,207,8,17,1,18,1,18,1,18,5,18,212,8,18,10,18,12,18,215,9,18,3,18,
		217,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,230,
		8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,238,8,19,3,19,240,8,19,1,20,1,
		20,1,20,1,20,1,20,0,0,21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,0,4,1,0,20,24,1,0,16,17,1,0,18,19,1,0,34,37,256,0,45,1,0,0,
		0,2,52,1,0,0,0,4,62,1,0,0,0,6,80,1,0,0,0,8,90,1,0,0,0,10,120,1,0,0,0,12,
		132,1,0,0,0,14,134,1,0,0,0,16,152,1,0,0,0,18,154,1,0,0,0,20,158,1,0,0,
		0,22,163,1,0,0,0,24,170,1,0,0,0,26,178,1,0,0,0,28,182,1,0,0,0,30,185,1,
		0,0,0,32,193,1,0,0,0,34,201,1,0,0,0,36,216,1,0,0,0,38,239,1,0,0,0,40,241,
		1,0,0,0,42,44,3,2,1,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,
		1,0,0,0,46,48,1,0,0,0,47,45,1,0,0,0,48,49,5,0,0,1,49,1,1,0,0,0,50,53,3,
		6,3,0,51,53,3,20,10,0,52,50,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,63,3,
		6,3,0,55,63,3,10,5,0,56,63,3,14,7,0,57,63,3,18,9,0,58,63,3,12,6,0,59,63,
		3,20,10,0,60,63,3,16,8,0,61,63,3,22,11,0,62,54,1,0,0,0,62,55,1,0,0,0,62,
		56,1,0,0,0,62,57,1,0,0,0,62,58,1,0,0,0,62,59,1,0,0,0,62,60,1,0,0,0,62,
		61,1,0,0,0,63,5,1,0,0,0,64,65,5,7,0,0,65,66,5,38,0,0,66,67,5,27,0,0,67,
		68,3,8,4,0,68,69,5,28,0,0,69,70,5,33,0,0,70,71,5,1,0,0,71,72,3,24,12,0,
		72,81,1,0,0,0,73,74,5,7,0,0,74,75,5,38,0,0,75,76,5,27,0,0,76,77,3,8,4,
		0,77,78,5,28,0,0,78,79,6,3,-1,0,79,81,1,0,0,0,80,64,1,0,0,0,80,73,1,0,
		0,0,81,7,1,0,0,0,82,87,5,38,0,0,83,84,5,26,0,0,84,86,5,38,0,0,85,83,1,
		0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,91,1,0,0,0,89,87,1,
		0,0,0,90,82,1,0,0,0,90,91,1,0,0,0,91,9,1,0,0,0,92,93,5,8,0,0,93,94,3,26,
		13,0,94,95,5,33,0,0,95,96,5,1,0,0,96,97,3,24,12,0,97,98,5,9,0,0,98,99,
		5,33,0,0,99,101,5,1,0,0,100,102,3,24,12,0,101,100,1,0,0,0,101,102,1,0,
		0,0,102,121,1,0,0,0,103,104,5,8,0,0,104,105,3,26,13,0,105,106,6,5,-1,0,
		106,107,5,9,0,0,107,108,5,33,0,0,108,110,5,1,0,0,109,111,3,24,12,0,110,
		109,1,0,0,0,110,111,1,0,0,0,111,121,1,0,0,0,112,113,5,8,0,0,113,114,3,
		26,13,0,114,115,5,33,0,0,115,116,5,1,0,0,116,117,3,24,12,0,117,118,5,9,
		0,0,118,119,6,5,-1,0,119,121,1,0,0,0,120,92,1,0,0,0,120,103,1,0,0,0,120,
		112,1,0,0,0,121,11,1,0,0,0,122,123,5,10,0,0,123,124,3,26,13,0,124,125,
		5,33,0,0,125,126,5,1,0,0,126,127,3,24,12,0,127,133,1,0,0,0,128,129,5,10,
		0,0,129,130,3,26,13,0,130,131,6,6,-1,0,131,133,1,0,0,0,132,122,1,0,0,0,
		132,128,1,0,0,0,133,13,1,0,0,0,134,135,5,12,0,0,135,136,3,26,13,0,136,
		137,5,1,0,0,137,15,1,0,0,0,138,139,5,11,0,0,139,140,3,26,13,0,140,141,
		5,14,0,0,141,142,3,36,18,0,142,143,5,33,0,0,143,144,5,1,0,0,144,145,3,
		24,12,0,145,153,1,0,0,0,146,147,5,11,0,0,147,148,3,26,13,0,148,149,5,14,
		0,0,149,150,3,36,18,0,150,151,6,8,-1,0,151,153,1,0,0,0,152,138,1,0,0,0,
		152,146,1,0,0,0,153,17,1,0,0,0,154,155,5,13,0,0,155,156,3,26,13,0,156,
		157,5,1,0,0,157,19,1,0,0,0,158,159,5,38,0,0,159,160,5,25,0,0,160,161,3,
		26,13,0,161,162,5,1,0,0,162,21,1,0,0,0,163,164,5,38,0,0,164,165,5,27,0,
		0,165,166,3,36,18,0,166,168,5,28,0,0,167,169,5,1,0,0,168,167,1,0,0,0,168,
		169,1,0,0,0,169,23,1,0,0,0,170,172,5,3,0,0,171,173,3,4,2,0,172,171,1,0,
		0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,
		177,5,4,0,0,177,25,1,0,0,0,178,180,3,30,15,0,179,181,3,28,14,0,180,179,
		1,0,0,0,180,181,1,0,0,0,181,27,1,0,0,0,182,183,7,0,0,0,183,184,3,30,15,
		0,184,29,1,0,0,0,185,190,3,32,16,0,186,187,7,1,0,0,187,189,3,32,16,0,188,
		186,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,31,1,0,
		0,0,192,190,1,0,0,0,193,198,3,34,17,0,194,195,7,2,0,0,195,197,3,34,17,
		0,196,194,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,
		33,1,0,0,0,200,198,1,0,0,0,201,206,3,38,19,0,202,203,5,29,0,0,203,204,
		3,26,13,0,204,205,5,30,0,0,205,207,1,0,0,0,206,202,1,0,0,0,206,207,1,0,
		0,0,207,35,1,0,0,0,208,213,3,26,13,0,209,210,5,26,0,0,210,212,3,26,13,
		0,211,209,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,
		217,1,0,0,0,215,213,1,0,0,0,216,208,1,0,0,0,216,217,1,0,0,0,217,37,1,0,
		0,0,218,219,5,27,0,0,219,220,3,26,13,0,220,221,5,28,0,0,221,240,1,0,0,
		0,222,223,5,15,0,0,223,224,5,27,0,0,224,225,3,26,13,0,225,226,5,28,0,0,
		226,240,1,0,0,0,227,240,3,40,20,0,228,230,7,1,0,0,229,228,1,0,0,0,229,
		230,1,0,0,0,230,231,1,0,0,0,231,240,7,3,0,0,232,237,5,38,0,0,233,234,5,
		27,0,0,234,235,3,36,18,0,235,236,5,28,0,0,236,238,1,0,0,0,237,233,1,0,
		0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,218,1,0,0,0,239,222,1,0,0,0,239,
		227,1,0,0,0,239,229,1,0,0,0,239,232,1,0,0,0,240,39,1,0,0,0,241,242,5,29,
		0,0,242,243,3,36,18,0,243,244,5,30,0,0,244,41,1,0,0,0,22,45,52,62,80,87,
		90,101,110,120,132,152,168,174,180,190,198,206,213,216,229,237,239
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parser.generated
